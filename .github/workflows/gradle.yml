name: Java CI with Gradle

# main 브랜치와 dev 브랜치의 push와 pull로 CI/CD가 작동
on:
  push:
    branches:
      - "main"
      - "dev"
  pull_request:
    branches:
      - "main"
      - "dev"

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          # 자신이 사용하는 자바 버전에 맞춰주자
          java-version: '17'
          distribution: 'temurin'

      - uses : actions/checkout@v3
        #1
        # 해당 부분은 상당히 중요함 (글에서 부가설명)
        # application.properties는 외부에 노출되면 안되므로 Actions가 빌드될때마다 해당 Repository의 Secret 설정을
        # 이용하여서 설정 파일을 생성해줌 (github에 commit 되는게 아님!)
        # 환경별로 다른 properties 파일 설정
      - run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "${{ secrets.APPLICATION_PROD_PROPERTIES }}" > ./src/main/resources/application.properties
          elif [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "${{ secrets.APPLICATION_DEV_PROPERTIES }}" > ./src/main/resources/application.properties
          fi
      - run: cat ./src/main/resources/application.properties

      # gradlew에 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradlew 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # 빌드를 성공하면 해당 프로젝트를 zip로 만듬
      # 이름은 run 에서 설정 가능
      - name: Make zip file
        run: zip -r ./vsgg.zip .
        shell: bash

        #2
        # 브랜치에 따른 AWS 계정 설정
      - name: Configure AWS credentials for main
        if: github.ref_name == 'main'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # 깃허브 Secret에 넣어둔 Access key
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_MAIN }}
          # 깃허브 Secret에 넣어둔 Secret key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_MAIN }}
          # 깃허브 Secret에 넣어둔 Region
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure AWS credentials for dev
        if: github.ref_name == 'dev'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}


        #3
        # 브랜치에 따른 S3에 해당 zip 파일 저장
      - name: Upload to S3 for main
        if: github.ref_name == 'main'
        run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./vsgg.zip s3://vsgg-bucket/vsgg.zip

      - name: Upload to S3 for dev
        if: github.ref_name == 'dev'
        run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./vsgg.zip s3://vsgg-bucket-dev/vsgg.zip



        #4
        # 브랜치에 따른 AWS CodeDeploy 배포
      - name: Deploy to CodeDeploy for main
        if: github.ref_name == 'main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_MAIN }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_MAIN }}
        run: |
          aws deploy create-deployment \
          --application-name vsgg-CodeDeploy \
          --deployment-group-name vsgg \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=vsgg-bucket,bundleType=zip,key=vsgg.zip \
          --region ${{ secrets.AWS_REGION }}

      - name: Deploy to CodeDeploy for dev
        if: github.ref_name == 'dev'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        run: |
          aws deploy create-deployment \
          --application-name vsgg-CodeDeploy-dev \
          --deployment-group-name vsgg-dev \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=vsgg-bucket-dev,bundleType=zip,key=vsgg.zip \
          --region ${{ secrets.AWS_REGION }}
